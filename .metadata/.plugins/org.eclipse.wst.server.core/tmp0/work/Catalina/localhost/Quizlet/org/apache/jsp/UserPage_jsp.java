/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-03-11 22:43:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import user.*;
import java.util.*;
import user.AccountManager;
import quiz.*;
import java.sql.*;
import quiz.ScoreBoard.Score;
import java.util.Date;

public final class UserPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("quiz");
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("user");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("quiz.ScoreBoard.Score");
    _jspx_imports_classes.add("user.AccountManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
 User u = (User)request.getAttribute("user"); 
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>");
 out.println(u.getUserName()); 
      out.write("</title>\n");
      out.write("\t<link rel=\"stylesheet\" href=\"CSS/common.css\">\n");
      out.write("\t<link rel=\"stylesheet\" href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\">\n");
      out.write("\t<link rel=\"stylesheet\" href=\"CSS/login-formatting.css\">\n");
      out.write("\t\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div id=header>\n");
      out.write("\n");
      out.write("\t\t<ul>\n");
      out.write("\t\t\t<li class=\"name\"><a>Quizzler</a></li>\n");
      out.write("\t\t\t<li><a href=\"HomepageLogin.html\">Logout</a></li>\n");
      out.write("\t\t\t<li><a href=\"ListQuizzes.jsp\">Quizzes</a></li>\n");
      out.write("\t\t\t<li><a href=\"/Quizlet/HomepageUser.jsp\">Profile</a></li>\n");
      out.write("\t\t</ul>\n");
      out.write("\t\t<div id=\"innerHeaderLarge\">\n");
      out.write("\t\t\t<h1>");
 out.println(u.getUserName());
      out.write("</h1>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<a href=\"/Quizlet/SendMessage.jsp?recipient=");
 out.println(u.getUserName()); 
      out.write("\">Send a message</a>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<p>\n");
      out.write("\t\t\t");
 
				if(request.getAttribute("requestStatus") != null) {
					out.println("Request sent to " + request.getAttribute("requestStatus"));
				} else if (request.getAttribute("friends") == null) {
					out.println("<form action=\"FriendRequestServlet\" method=\"post\">");
					out.println("<input name=\"user\" type=\"hidden\" value=\""+ u.getUserName() + "\"/>");
					out.println("<input type=\"submit\" class=\"btn btn-primary\" value=\"Send Friend Request\"/>");
					out.println("<input type=\"hidden\" class=\"btn btn-primary\" name=\"currUser\" value=\"" + request.getAttribute("currUser") + "\"/>");
					out.println("</form>");
				}
			
      out.write("\n");
      out.write("\t\t\t</p>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t");

				out.write("<table style = \"width:100%\">");
				out.write("<tr>");
				out.write("<th>Friends</th>");
				out.write("<tr>");
				if(u.getFriends().size() == 0){
					out.write("<tr>");
					out.write("<td> ");
					out.write("</td>");
					out.write("</tr>");
				}
				for (Integer ID : u.getFriends()) {
					User friend = ((AccountManager)session.getAttribute("am")).getAccount(ID);
					out.write("<tr>");
					out.write("<td>");
					User cu = ((AccountManager)session.getAttribute("am")).getAccount((String)session.getAttribute("user"));
					
					out.println("<a href =\"/Quizlet/SearchUserServlet?user=" + friend.getUserName() + "&currUser=" + cu.getUserName() + "\">");
					out.println(friend.getUserName());
					out.println("</a>");
					out.write("</td>");
					out.write("</tr>");
				}
				out.write("</table>");

			
      out.write("\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<h2>Recently Taken Quizzes:</h2>\t\n");
      out.write("  \t\t\t");

  			
  			ServletContext context = getServletContext(); 
			DBConnection connect = (DBConnection)(context.getAttribute("Connection"));
			
			Statement stmt = connect.getStatement(); 
			ResultSet rs = stmt.executeQuery("SELECT * FROM quizzes");
  			
  			ScoreBoard board = null; 
			String username = u.getUserName();
  			try {
  				rs.beforeFirst();
  				
  				while(rs.next()) {
  					Blob boardblob = rs.getBlob(7);
 					board = new ScoreBoard(boardblob);
 					ArrayList<Score> recentScores = board.getRecentTaken(username);
 					
 					String quizname = rs.getString(2);
 					for (Score sc : recentScores) {
 						Date dt = new Date(sc.timetaken);
 						out.println("<p>Quiz : "+quizname +", Taken at: "+ dt.toString()+", Score: "+sc.score+", Time: "+sc.timescore+"</p>");
 					}
  				}
  			} catch (SQLException e) {
  				// TODO Auto-generated catch block
  				e.printStackTrace();
  			}
			
      out.write("\n");
      out.write("\t\t\t<h2>Recently Created Quizzes:</h2>\t\n");
      out.write("  \t\t\t");

  			
  			ArrayList<Long> timelist = new ArrayList<Long>();
			rs.beforeFirst();
			while (rs.next()) {
				long time = rs.getLong(4);
				timelist.add(time);
			}
			Collections.sort(timelist); 
			Collections.reverse(timelist);
			long timecutoff;
			if (timelist.size() < 3) {
				timecutoff = 0;
			} else timecutoff = timelist.get(2);
			rs.beforeFirst();
  			
			ArrayList<Long> yourquiz = new ArrayList<Long>();
			rs.beforeFirst();
			while (rs.next()) {
				long time = rs.getLong(4);
				if (rs.getString(1).equals(username)) yourquiz.add(time);
			}
			Collections.sort(yourquiz); 
			Collections.reverse(yourquiz);
			
			if (yourquiz.size() < 3) {
				timecutoff = 0;
			} else timecutoff = yourquiz.get(2);
			rs.beforeFirst();
			while (rs.next()) {
				long time = rs.getLong(4);
				if (time >= timecutoff && rs.getString(1).equals(username)) {
					String name = rs.getString(2);
					Date dt = new Date(time);
					out.println("<p><a href=\"QuizSummaryPage.jsp?quizname="+name+"\">"+name+"</a> Created on "+dt.toString()+"</p>");
				}
			}
			
      out.write("\n");
      out.write("\t\t\t\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\t\t\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
